openapi: 3.1.0
info:
  title: SponsorBlock API
  version: '1.0'
  summary: SponsorBlock API
  description: OpenAPI documentation of SponsorBlock API
  license:
    name: GPL v3.0
    identifier: GPL-3.0-only
  contact:
    name: Michael Chang
    url: 'https://github.com/mchangrh'
    email: michael@mchang.name
servers:
  - url: 'https://sponsor.ajay.app/api'
    description: Production Server
tags:
  - name: admin
    description: Commands that need admin userID
  - name: normal
    description: Commands that can be performed with any userID
  - name: vip
    description: Commands that need VIP userID
  - name: stats
    description: Commands for gathering statistics
  - name: nouserid
    description: Commands that can be performed without userID
paths:
  /addUserAsVIP:
    post:
      summary: Add user as VIP
      operationId: postadduserasvip
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      security: []
      description: |-
        Add user to VIP table.

        VIPs have extra privileges and their votes count more.
      parameters:
        - schema:
            type: string
          in: query
          name: userID
          required: true
          description: Public userID of user to add to VIP list
        - schema:
            type: boolean
          in: query
          name: enabled
          description: enable or disable user
      tags:
        - admin
  /skipSegments:
    get:
      summary: Get Skip Segments
      tags:
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/skipSegment'
        '404':
          description: Not Found
      operationId: getskipsegments
      description: Get segments to skip for a video
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/actionType'
        - $ref: '#/components/parameters/actionTypes'
        - $ref: '#/components/parameters/requiredSegment'
        - $ref: '#/components/parameters/requiredSegments'
        - $ref: '#/components/parameters/service'
    parameters: []
    post:
      summary: ''
      operationId: postSkipSegments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  UUID:
                    $ref: '#/components/schemas/segmentUUID'
                  category:
                    $ref: '#/components/schemas/category'
                  segment:
                    type: array
                    description: Start and end time in seconds
                    items:
                      type: integer
                      maximum: 2
                      minimum: 2
        '400':
          description: Bad Request
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                description: Reason for rejection
        '409':
          description: Duplicate
        '429':
          description: Too Many Requests
      description: Create a segment on a video
      security: []
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - schema:
            type: string
            default: mchang-oapi/1
          in: query
          name: userAgent
          description: user agent of submitter
          required: true
        - $ref: '#/components/parameters/service'
        - schema:
            type: number
          in: query
          name: videoDuration
          description: 'duration of video, will attempt to retrieve from YT API if missing. Used to determine when a submission is out of date'
        - $ref: '#/components/parameters/actionType'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                videoID:
                  type: string
                  pattern: '^[0-9A-Za-z_-]{11}$'
                  example: dQw4w9WgXcQ
                  description: ID of video
                startTime:
                  type: number
                  format: float
                  description: start time of segment
                endTime:
                  type: number
                  format: float
                  description: end time of segment
                service:
                  $ref: '#/components/schemas/services'
                videoDuration:
                  type: number
                  format: float
                  description: 'Duration of video, will attempt to retrieve from YT API if missing. Used to determine when a submission is out of date'
                  minimum: 0
                segments:
                  type: array
                  items:
                    $ref: '#/components/schemas/submitSegment'
              required:
                - videoID
                - startTime
                - endTime
                - segments
        description: Alternative Submission format
      tags:
        - normal
  '/skipSegments/{sha256HashPrefix}':
    get:
      summary: Get Skip Segments (Extra Privacy)
      tags:
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hashSkipSegment'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getSkipSegmentsByHash
      description: Get skip segments with extra privacy
      parameters:
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/requiredSegment'
        - $ref: '#/components/parameters/requiredSegments'
        - $ref: '#/components/parameters/actionType'
        - $ref: '#/components/parameters/actionTypes'
        - $ref: '#/components/parameters/service'
    parameters:
      - $ref: '#/components/parameters/sha256HashPrefix'
  /voteOnSponsorTime:
    post:
      summary: Vote on Segment
      operationId: postVoteOnSponsorTime
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                description: Moderation reason
      description: Vote on segment or vote to change category on segment
      parameters:
        - $ref: '#/components/parameters/UUID'
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 20
          in: query
          name: type
          description: 'Vote type - 0 for downvote, 1 for upvote, 20 to undo vote'
        - $ref: '#/components/parameters/category'
      security: []
      tags:
        - normal
  /viewedVideoSponsorTime:
    parameters: []
    post:
      summary: Add view to Segment
      operationId: postViewedVideoSponsorTime
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      parameters:
        - $ref: '#/components/parameters/UUID'
      description: Add view to segment
      tags:
        - nouserid
  /userInfo:
    get:
      summary: get User Info
      tags:
        - nouserid
        - stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    $ref: '#/components/schemas/publicUserID'
                  userName:
                    description: public userID if not set
                    oneOf:
                      - properties: {}
                        type: string
                      - $ref: '#/components/schemas/publicUserID'
                  minutesSaved:
                    type: number
                    format: float
                    description: minutes saved
                  segmentCount:
                    type: integer
                    description: Total number of segments excluding ignored/ hidden segments
                  ignoredSegmentCount:
                    type: integer
                    description: Total number of ignored/ hidden segments
                  viewCount:
                    type: integer
                    description: Total number of views ecluding views on ignored/ hidden segments
                  ignoredViewCount:
                    type: integer
                    description: Total number of views on ignored/ hidden segments
                  warnings:
                    type: integer
                    description: currently enabled warnings
                  reputation:
                    type: number
                    description: Reputation value
                    format: float
                  vip:
                    type: boolean
                    description: VIP status
                  lastSegmentID:
                    $ref: '#/components/schemas/segmentUUID'
        '400':
          description: Bad Request
      operationId: getUserInfo
      parameters:
        - schema:
            type: string
            pattern: '^[a-f0-9]{64}$'
          in: query
          name: publicUserID
          description: Public userID of user to lookup
        - schema:
            type: string
          in: query
          name: userID
          description: Private userID
        - schema:
            uniqueItems: true
            enum:
              - userID
              - userName
              - minutesSaved
              - segmentCount
              - ignoredSegmentCount
              - viewCount
              - ignoredViewCount
              - warnings
              - warningReason
              - reputation
              - vip
              - lastSegmentID
            type: array
          in: query
          name: value
          description: Values to get from userInfo
          style: spaceDelimited
      description: Get information for a user or yourself
  /getViewsForUser:
    get:
      summary: get Views for user
      tags:
        - stats
        - normal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  viewCount:
                    type: integer
        '404':
          description: Not Found
      operationId: getViewsForUser
      description: Get number of views on all segments
      security: []
    parameters: []
  /getTimeSavedForUser:
    get:
      summary: Get time saved for user
      tags:
        - normal
        - stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  timeSaved:
                    type: number
                    format: float
                    description: time saved in minutes
        '400':
          description: Bad Request
      operationId: get-getTimeSavedForUser
      security: []
  /setUsername:
    parameters: []
    post:
      summary: Set Username
      operationId: setUsername
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not an admin)
      tags:
        - normal
        - admin
      security:
        - userID: []
      parameters:
        - schema:
            type: string
            maxLength: 64
          in: query
          name: username
          description: New Username
          required: true
      description: Set new username for user
  /getUsername:
    get:
      summary: Get Current Username
      tags:
        - normal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userName:
                    description: public userID if not username set
                    oneOf:
                      - type: string
                        properties: {}
                      - $ref: '#/components/schemas/publicUserID'
      operationId: getUsername
      security: []
      description: Get current userName
  /segmentInfo:
    get:
      summary: Get Segment Info
      tags:
        - stats
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dbSegment'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getSegmentInfo
      description: Get information about a segment or segments
      parameters:
        - schema:
            type: string
            pattern: '^[A-Fa-f0-9]{64}$'
          in: query
          name: UUID
          description: Target segment UUID
        - schema:
            type: array
            minItems: 1
            maxItems: 10
          in: query
          name: UUIDs
          description: Array of UUID
  /userID:
    get:
      summary: Search usernames
      tags:
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 10
                items:
                  type: object
                  properties:
                    userName:
                      type: string
                    userID:
                      $ref: '#/components/schemas/publicUserID'
        '400':
          description: Bad Request (Your inputs are wrong/impossible or exceed the character limits)
        '404':
          description: Not Found
      operationId: getUserID
      description: Search for userIDs corresponding to userID
      parameters:
        - schema:
            type: string
          in: query
          name: username
          description: 'Search string for username. Case sensitive. Minimum for non-exact is 3 characters, maximum is 64 characters'
          required: true
        - schema:
            type: boolean
          in: query
          name: exact
          description: Searches for exact username with no wildcard
  /lockCategories:
    get:
      summary: Get lock categories on a video
      tags:
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/videoLock'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getLockCategories
      description: Get lock categories given videoID
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
    post:
      summary: ''
      operationId: postLockCategories
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not a VIP)
      description: 'Create a category lock on the video, disallowing further submissions for that category'
      security:
        - privateUserID: []
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - $ref: '#/components/parameters/categories'
        - schema:
            type: string
          in: query
          name: reason
          description: Lock reason
      tags:
        - vip
    delete:
      summary: ''
      operationId: deleteLockCategories
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Removed lock categories entrys for video videoID
                    example: Removed lock categories entrys for video videoID
              examples:
                Example:
                  value:
                    message: Removed lock categories entrys for video videoID
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not a VIP)
      description: Delete existing category locks on a video
      security:
        - privateUserID: []
      tags:
        - vip
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - $ref: '#/components/parameters/categories'
  '/lockCategories/{sha256HashPrefix}':
    get:
      summary: Get lock categories by hash
      tags:
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    videoID:
                      $ref: '#/components/schemas/videoID'
                    hash:
                      $ref: '#/components/schemas/videoIDHash'
                    categories:
                      type: array
                      minItems: 1
                      items:
                        $ref: '#/components/schemas/category'
                    reason:
                      $ref: '#/components/schemas/lockReason'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getLockCategoriesByHash
      description: Get lock categores for a video with extra privacy
    parameters:
      - $ref: '#/components/parameters/sha256HashPrefix'
  /searchSegments:
    get:
      summary: Get all segments for a given video
      tags:
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  segmentCount:
                    type: integer
                    description: Total segments matching query
                  page:
                    type: integer
                    description: Page Number
                  segments:
                    type: array
                    minItems: 1
                    maxItems: 10
                    items:
                      $ref: '#/components/schemas/searchSegment'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getSearchSegments
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/actionType'
        - $ref: '#/components/parameters/actionTypes'
        - $ref: '#/components/parameters/service'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: page
          description: Page to start from
        - schema:
            type: integer
            minimum: -2
          in: query
          name: minVotes
          description: Lower vote threshold
        - schema:
            type: integer
          in: query
          name: maxVotes
          description: Upper vote threshold
        - schema:
            type: integer
            minimum: 0
          in: query
          name: minViews
          description: Lower view threshold
        - schema:
            type: integer
          in: query
          name: maxViews
          description: Upper view threshold
        - schema:
            type: boolean
            default: true
          in: query
          name: locked
          description: Show locked segments
        - schema:
            type: boolean
            default: true
          in: query
          name: hidden
          description: Show hidden segments
        - schema:
            type: boolean
            default: true
          in: query
          name: ignored
          description: Show ignored segments
  '/status/{value}':
    get:
      summary: Get server status
      tags:
        - stats
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusResponse'
        '404':
          description: Not Found
      operationId: getStatusParam
      description: Get status and stats of the server
    parameters:
      - schema:
          type: string
          enum:
            - uptime
            - commit
            - db
            - startTime
            - processTime
        name: value
        in: path
        description: value to fetch
        required: true
  /status:
    get:
      summary: Get server status
      tags:
        - nouserid
        - stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchSegment'
        '404':
          description: Not Found
      operationId: getStatus
      description: Get status and stats of the server
  /getTopUsers:
    get:
      summary: Get top users
      tags:
        - stats
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userNames:
                    type: array
                    items:
                      type: string
                  viewCounts:
                    type: array
                    items:
                      type: integer
                  totalSubmissions:
                    type: array
                    items:
                      type: integer
                  minutesSaved:
                    type: array
                    items:
                      type: number
                      format: float
        '400':
          description: Bad Request
      operationId: getTopUsers
      description: Get top submitters
      parameters:
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
          in: query
          name: sortType
          description: '0 for by minutes saved, 1 for by view count, 2 for by total submissions'
          required: true
  /getTotalStats:
    get:
      summary: Get total stats
      tags:
        - stats
        - nouserid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCount:
                    oneOf:
                      - type: integer
                        properties: {}
                        description: Only if countContributingUsers was true
                      - type: 'null'
                        properties: {}
                    description: ''
                  activeUsers:
                    type: integer
                    description: Sum of public install stats
                  apiUsers:
                    type: integer
                    description: '48-hour active API users https://github.com/ajayyy/PrivacyUserCount'
                  viewCount:
                    type: integer
                    description: Total reported segment views
                  totalSubmissions:
                    type: integer
                    description: Number of total submissions
                  minutesSaved:
                    type: number
                    format: float
                    description: Total number of minutes saved
      operationId: getTotalStats
      description: Get stats across all of sponsorblock
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: countContributingUsers
          description: Include contributing users
  /getDaysSavedFormatted:
    get:
      summary: Get total days saved
      tags:
        - nouserid
        - stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  daysSaved:
                    type: number
                    format: float
                    description: Days saved (2 decimal places)
      operationId: getDaysSavedFormatted
      description: Get days saved by all skips
  /isUserVIP:
    get:
      summary: Get if user is VIP
      tags:
        - normal
        - vip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hashedUserID:
                    $ref: '#/components/schemas/publicUserID'
                  vip:
                    type: boolean
                    description: if user is VIP
        '400':
          description: Bad Request
      operationId: getIsUserVIP
      description: Check if user is VIP
      security:
        - privateUserID: []
  /shadowBanUser:
    post:
      summary: Shadowban User
      operationId: postShadowBanUser
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not a VIP)
        '409':
          description: Already shadowbanned and unHideOldSubmissions not changed
      description: |-
        Shadow banned submissions are hidden for everyone but the IP that originally submitted it.
        Shadow banning a user shadow bans all future submissions.

        User can be re-shadowbanned if segments were not previously hidden
      security:
        - privateAdminUserID: []
      parameters:
        - $ref: '#/components/parameters/publicUserID'
        - schema:
            type: boolean
            default: true
          in: query
          name: enabled
          description: Enable or disable ban
        - schema:
            type: boolean
          in: query
          name: unHideOldSubmittions
          description: Should all previous submissions be banned as well
      tags:
        - vip
        - admin
  /warnUser:
    post:
      summary: Warn User
      operationId: postWarnUser
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not a VIP)
        '409':
          description: User already warned
      description: |-
        Temporary ban that shows a warning asking them to contact us.

        If a user is re-warned but there is still a non-expired warning, it is reenabled
      tags:
        - vip
      security:
        - privateVIPUserID: []
      parameters:
        - $ref: '#/components/parameters/publicUserID'
        - schema:
            type: boolean
            default: true
          in: query
          name: enabled
          description: Enable or disable warning
  /clearCache:
    post:
      summary: Clear Cache
      operationId: postClearCache
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Cache cleared on video videoID
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not a VIP)
      description: Clear Redis cahce for video
      security:
        - privateUserID: []
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
      tags:
        - vip
  /purgeAllSegments:
    post:
      summary: Hide all Segments
      operationId: postPurgeAllSegments
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden (You are not a VIP)
      description: Hide all segments on a video without affecting submitters' reputation
      security:
        - privateUserID: []
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
      tags:
        - vip
components:
  schemas:
    skipSegment:
      type: object
      title: skipSegment
      examples:
        - - segment:
              - 363.90582
              - 370.79547
            UUID: 07bb5fb8cfb9d819dad4fe38fe9c51a7f3b6d6aebf36054bfffa75c8019eb57f
            category: outro
            videoDuration: 0
      properties:
        segment:
          type: array
          maxItems: 2
          minItems: 2
          description: start and end time in seconds
          items:
            type: integer
        UUID:
          $ref: '#/components/schemas/segmentUUID'
        category:
          $ref: '#/components/schemas/category'
        videoDuration:
          $ref: '#/components/schemas/videoDuration'
        actionType:
          $ref: '#/components/schemas/actionType'
    segmentUUID:
      type: string
      title: segmentUUID
      pattern: '^[a-f0-9]{64,65}$'
      examples:
        - string
      format: segmentUUID
      description: UUID of segment
      example: 07bb5fb8cfb9d819dad4fe38fe9c51a7f3b6d6aebf36054bfffa75c8019eb57f
    publicUserID:
      type: string
      title: publicUserID
      pattern: '^[a-f0-9]{64}$'
      format: publicUserID
      description: Public userID (private userID hashed 5000 times)
      example: 7b89ea26f77bda8176e655eee86029f28c1e6514b6d6e3450bce362b5b126ca3
    category:
      type: string
      enum:
        - sponsor
        - selfpromo
        - interaction
        - intro
        - outro
        - preview
        - music_offtopic
        - poi_highlight
      default: sponsor
      description: Segment Category
      title: ''
    hashSkipSegment:
      type: array
      title: hashSkipSegment
      description: Privacy preserving skip segments
      minItems: 1
      uniqueItems: true
      examples:
        - - videoID: V9_PjdU3Mpo
            hash: af01cd59f8994c4ee9f53102953c91532494dd385f30eedb5c8453f438acd885
            segments:
              - segment:
                  - 363.90582
                  - 370.79547
                UUID: 07bb5fb8cfb9d819dad4fe38fe9c51a7f3b6d6aebf36054bfffa75c8019eb57f
                category: outro
                videoDuration: 0
      items:
        type: object
        additionalProperties: false
        properties:
          videoID:
            $ref: '#/components/schemas/videoID'
          hash:
            $ref: '#/components/schemas/videoIDHash'
          segments:
            $ref: '#/components/schemas/skipSegment'
    services:
      type: string
      title: services
      enum:
        - YouTube
      default: YouTube
      description: Supported services
      examples: []
      example: YouTube
    submitSegment:
      title: submitSegment
      type: object
      description: Object of segment to submit
      examples:
        - segment:
            - 3
            - 10
          category: sponsor
          actionType: skip
      properties:
        segment:
          type: array
          description: |
            start and end time in seconds
          items:
            type: number
            exclusiveMinimum: 2
            exclusiveMaximum: 2
            format: float
        category:
          $ref: '#/components/schemas/category'
        actionType:
          $ref: '#/components/schemas/actionType'
      required:
        - segment
        - category
    actionType:
      type: string
      title: actionType
      enum:
        - skip
        - mute
      default: skip
      description: possible action types
    videoID:
      type: string
      title: videoID
      pattern: '^[0-9A-Za-z_-]{11}$'
      description: ID of video
    videoDuration:
      type: number
      title: videoDuration
      format: float
      description: Duration of video at time of submission.
    videoIDHash:
      type: string
      title: videoIDHash
      description: Full hash of videoID
      pattern: '^[a-f0-9]{64}$'
      example: 5f6b0b4e201f2a7e66927abb5cadeec81624dcc8efe6644b78aa182213f653a2
    videoLock:
      title: videoLocks
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/category'
        reason:
          type: string
          description: Specified reason for lock
    lockReason:
      type: string
      title: lockReason
      example: High Traffic Video
      description: VIP specified lock reason
    searchSegment:
      title: singleSearchSegment
      type: object
      description: Single search segment
      properties:
        UUID:
          $ref: '#/components/schemas/segmentUUID'
        timeSubmitted:
          type: integer
          description: Time submitted (ms epoch)
          example: 1564088876715
        startTime:
          type: number
          format: float
          description: start time of segment
        endTime:
          type: number
          format: float
          description: end time of segment
        category:
          $ref: '#/components/schemas/category'
        actionType:
          $ref: '#/components/schemas/actionType'
        votes:
          type: string
          description: votes on segment
        views:
          type: integer
          description: Reported views on segment
        locked:
          type: boolean
          description: If segment is locked
        hidden:
          type: boolean
          description: If segment is hidden
        shadowhidden:
          description: If submitter is shadowbanned
          type: boolean
    dbSegment:
      title: dbSegment
      type: object
      minProperties: 1
      maxProperties: 10
      description: Segment as it is in DB
      properties:
        videoID:
          $ref: '#/components/schemas/videoID'
        startTime:
          type: number
          format: float
          description: start time of segment
        endTime:
          type: number
          format: float
          description: end time of segment
        votes:
          type: integer
          description: votes on segment
        locked:
          type: integer
          enum:
            - 1
            - 0
          description: If segment is locked
        incorrectVotes:
          type: integer
          description: Number of incorrect votes
        UUID:
          $ref: '#/components/schemas/segmentUUID'
        userID:
          $ref: '#/components/schemas/publicUserID'
        timeSubmitted:
          type: integer
          description: Time of submission (epoch ms)
          default: 0
          example: 1564088876715
        views:
          type: integer
          description: Number of reported views on segment
        category:
          $ref: '#/components/schemas/category'
        actionType:
          $ref: '#/components/schemas/actionType'
        service:
          $ref: '#/components/schemas/services'
        videoDuration:
          $ref: '#/components/schemas/videoDuration'
        hidden:
          type: integer
          default: 0
          description: If segment is hidden
          enum:
            - 0
            - 1
        reputation:
          type: number
          format: float
          description: Reputation of submitter at time of submission
        shadowHidden:
          default: 0
          description: If submitter is shadowbanned
          enum:
            - 0
            - 1
          type: integer
        hashedVideoID:
          $ref: '#/components/schemas/videoIDHash'
        userAgent:
          type: string
          description: userAgent of submitter
    statusResponse:
      title: statusResponse
      type: object
      description: ''
      properties:
        uptime:
          type: integer
          description: Uptime in seconds
        commit:
          description: ''
          oneOf:
            - description: Full SHA hash of latest git commit
              example: ca479bc2f70f6b38d86254fdab7af6e1b5f9c150
            - description: testing mode
              enum:
                - development
                - test
              default: test
          type: string
        db:
          type: integer
          default: 0
          example: 1
          description: Current database version
        startTime:
          type: integer
          example: 1564088876715
          description: Unix (ms) time that request was recieved
        processTime:
          type: integer
          description: ms between startTime and sending response
          example: 1
  securitySchemes:
    privateUserID:
      name: userID
      type: apiKey
      in: query
    privateAdminUserID:
      name: adminUserID
      type: apiKey
      in: query
    privateVIPUserID:
      name: issuerUserID
      type: apiKey
      in: query
  parameters:
    requiredVideoID:
      name: videoID
      in: query
      schema:
        type: string
        pattern: '^[0-9A-Za-z_-]{11}$'
        example: dQw4w9WgXcQ
      description: ID of video
      required: true
    category:
      name: category
      in: query
      schema:
        enum:
          - sponsor
          - selfpromo
          - interaction
          - intro
          - outro
          - preview
          - poi_highlight
          - music_offtopic
        default: sponsor
        type: string
      description: Segment Category
    categories:
      name: categories
      in: query
      required: false
      schema:
        type: array
        minItems: 1
        enum:
          - sponsor
          - selfpromo
          - interaction
          - intro
          - outro
          - preview
          - music_offtopic
          - poi_highlight
        behavior: Read/Write
        uniqueItems: true
      style: spaceDelimited
      description: Array of categories
    actionType:
      name: actionType
      in: query
      schema:
        type: string
        enum:
          - skip
          - mute
        default: skip
      description: Action type
    actionTypes:
      name: actionTypes
      in: query
      schema:
        type: array
        enum:
          - skip
          - mute
        uniqueItems: true
        minItems: 1
      style: spaceDelimited
      description: multiple action types
    requiredSegment:
      name: requiredSegment
      in: query
      required: false
      schema:
        type: string
        pattern: '^([a-f0-9]{64,65}$'
      description: Segment UUID to get regardless of votes
    requiredSegments:
      name: requiredSegments
      in: query
      required: false
      schema:
        type: array
        minItems: 1
        uniqueItems: true
      description: Segment UUIDs to get regardless
    service:
      name: service
      in: query
      required: false
      schema:
        type: string
        enum:
          - YouTube
        default: YouTube
      description: Service for segments
    UUID:
      name: UUID
      in: query
      schema:
        type: string
        pattern: '^[a-f0-9]{64,65}$'
      description: UUID of target segment
      required: true
    sha256HashPrefix:
      name: sha256HashPrefix
      in: path
      required: true
      schema:
        type: string
      description: First 4-32 characters of the has of the YouTube videoID
    publicUserID:
      name: userID
      in: query
      required: true
      schema:
        type: string
        format: publicUserID
        pattern: '^[a-f0-9]{64}$'
      description: Public userID of target
  responses: {}
  examples: {}
